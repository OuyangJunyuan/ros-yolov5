// Generated by gencpp from file ros_yolo/result.msg
// DO NOT EDIT!


#ifndef ROS_YOLO_MESSAGE_RESULT_H
#define ROS_YOLO_MESSAGE_RESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_yolo/bbox2d.h>

namespace ros_yolo
{
template <class ContainerAllocator>
struct result_
{
  typedef result_<ContainerAllocator> Type;

  result_()
    : prob(0.0)
    , bbox()
    , label()
    , id(0)  {
    }
  result_(const ContainerAllocator& _alloc)
    : prob(0.0)
    , bbox(_alloc)
    , label(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef float _prob_type;
  _prob_type prob;

   typedef  ::ros_yolo::bbox2d_<ContainerAllocator>  _bbox_type;
  _bbox_type bbox;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::ros_yolo::result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_yolo::result_<ContainerAllocator> const> ConstPtr;

}; // struct result_

typedef ::ros_yolo::result_<std::allocator<void> > result;

typedef boost::shared_ptr< ::ros_yolo::result > resultPtr;
typedef boost::shared_ptr< ::ros_yolo::result const> resultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_yolo::result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_yolo::result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_yolo::result_<ContainerAllocator1> & lhs, const ::ros_yolo::result_<ContainerAllocator2> & rhs)
{
  return lhs.prob == rhs.prob &&
    lhs.bbox == rhs.bbox &&
    lhs.label == rhs.label &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_yolo::result_<ContainerAllocator1> & lhs, const ::ros_yolo::result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_yolo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_yolo::result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_yolo::result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_yolo::result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_yolo::result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_yolo::result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_yolo::result_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_yolo::result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e46db6a70f293fc660c41a6da5944dc";
  }

  static const char* value(const ::ros_yolo::result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e46db6a70f293fcULL;
  static const uint64_t static_value2 = 0x660c41a6da5944dcULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_yolo::result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_yolo/result";
  }

  static const char* value(const ::ros_yolo::result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_yolo::result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 prob\n"
"bbox2d bbox\n"
"string label\n"
"int32 id\n"
"================================================================================\n"
"MSG: ros_yolo/bbox2d\n"
"float32[4] xyxy\n"
;
  }

  static const char* value(const ::ros_yolo::result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_yolo::result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prob);
      stream.next(m.bbox);
      stream.next(m.label);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_yolo::result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_yolo::result_<ContainerAllocator>& v)
  {
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
    s << indent << "bbox: ";
    s << std::endl;
    Printer< ::ros_yolo::bbox2d_<ContainerAllocator> >::stream(s, indent + "  ", v.bbox);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_YOLO_MESSAGE_RESULT_H
